version: "3.7"

########################### NETWORKS
networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge
  lan:
    external: true

########################### SERVICES
services:

#################Database###############
  mariadb:
    image: mariadb:10.4
    container_name: mariadb
    hostname: ${DB_HOST}
    networks:
      - traefik_proxy
    volumes:
        - ${USER_DIR}/docker/mariadb:/var/lib/mysql
    ports:
      - "${DB_PORT}:3306"
    restart: always
    # Send slow queries to a table so we can check for them in the
    # integration tests. For now we ignore queries not using indexes,
    # because that seems to trigger based on the optimizer's choice to not
    # use an index for certain queries, particularly when tables are still
    # small.
    command: mysqld --bind-address=0.0.0.0 --slow-query-log --log-output=TABLE --log-queries-not-using-indexes=ON
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}

##############FireBird DB####################
#Used by Syncovery file sync service
##Default username=sysdba
  firebirddb:
    image: jacobalberty/firebird:3.0.6
    container_name: firebirddb
    hostname: firebirddb
    networks:
      - traefik_proxy
    volumes:
        - ${USER_DIR}/docker/firebirddb:/firebird
    ports:
      - "${DB_PORT2}:3050"
    restart: always
    environment:
      - ISC_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - FIREBIRD_DATABASE=defaultdb
      - FIREBIRD_USER=root
      - FIREBIRD_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TZ}





############################# FRONTENDS

# Traefik - Reverse Proxy
# docker network create --gateway 172.19.0.1 --subnet 172.19.0.0/16 traefik_proxy
# touch $USER_DIR/traefik2/acme/acme.json
# chmod 600 $USER_DIR/traefik2/acme/acme.json
# touch $USER_DIR/traefik2/traefik.log
  traefik:
    container_name: traefik
    image: traefik:cantal
    restart: always
    command: # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
#      - --entrypoints.http.forwardedHeaders.trustedIPs=127.0.0.1/31, 192.168.90.1/24
#      - --entrypoints.http.proxyProtocol=true
#      - --entrypoints.http.proxyProtocol.trustedIPs=127.0.0.1/31, 192.168.90.1/24
      - --entryPoints.https.address=:443
      - --entryPoints.transrpc.address=:9091
      - --entryPoints.traefik.address=:8080
      - --api=true
#      - --api.insecure=true
#      - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/var/log/docker/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
#      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
#      - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # uncomment when testing
#      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
#      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
#      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.basic.acme.tlschallenge=true
      - --certificatesresolvers.basic.acme.email=$CLOUDFLARE_EMAIL
    networks:
     traefik_proxy:
        ipv4_address: 172.19.0.254
     default:
    ports:
      # https://www.reddit.com/r/docker/comments/c1wrep/traefik_reverse_proxy_question_docker_overlay/
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - $USER_DIR/docker/traefik2/rules:/rules # file provider directory
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $USER_DIR/docker/traefik2/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $USER_DIR/docker/traefik2/traefik.log:/var/log/docker/traefik.log # for fail2ban - make sure to touch file before starting container
      - ${USER_DIR}/docker/shared:/shared
#    environment:
#      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
#      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=basic"
#      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
#      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=secure-chain@file"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolallowmethods=GET, OPTIONS, PUT"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolalloworigin=https://$DOMAINNAME"
      - "traefik.http.middlewares.traefik-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.traefik-headers.headers.addvaryheader=true"
      - "traefik.http.middlewares.traefik-headers.headers.allowedhosts=traefik.$DOMAINNAME"
      - "traefik.http.middlewares.traefik-headers.headers.hostsproxyheaders=X-Forwarded-Host"
      - "traefik.http.middlewares.traefik-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslhost=traefik.$DOMAINNAME"
      - "traefik.http.middlewares.traefik-headers.headers.sslforcehost=true"
      - "traefik.http.middlewares.traefik-headers.headers.sslproxyheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.traefik-headers.headers.stsseconds=63072000"
      - "traefik.http.middlewares.traefik-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.traefik-headers.headers.stspreload=true"
      - "traefik.http.middlewares.traefik-headers.headers.forcestsheader=true"
      - "traefik.http.middlewares.traefik-headers.headers.framedeny=true"
      - "traefik.http.middlewares.traefik-headers.headers.customFrameOptionsValue='allow-from https:$DOMAINNAME'"
#      - "traefik.http.middlewares.traefik-headers.headers.customframeoptionsvalue=SAMEORIGIN" # This option overrides FrameDeny
      - "traefik.http.middlewares.traefik-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.traefik-headers.headers.browserxssfilter=true"
#      - "traefik.http.middlewares.traefik-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; base-uri 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.referrerpolicy=same-origin"
      - "traefik.http.middlewares.traefik-headers.headers.featurepolicy=camera 'none'; geolocation 'none'; microphone 'none'; payment 'none'; usb 'none'; vr 'none';"
      - "traefik.http.middlewares.traefik-headers.headers.customresponseheaders.X-Robots-Tag=none,noarchive,nosnippet,notranslate,noimageindex,"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"

# Google OAuth - Single Sign On using OAuth 2.0
  # https://hub.docker.com/r/thomseddon/traefik-forward-auth
  # https://console.developers.google.com/
  # Follow directions at above link. My Google settings under the Credentials tab are:
  # Credentials: Name can be anything (mine is Traefik) and Authorized redirect URLs:  	https://oauth.$DOMAINNAME/_oauth
  # OAuth Concent Screen: Application Name is Traefik (think it can be anything). I entered my e-mail for support e-mail. Authorized Domains is $DOMAINNAME
  # Domain Verification: $DOMAINNAME
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: always
    networks:
      - traefik_proxy
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth
      - WHITELIST=$MY_EMAIL
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

# Portainer - Container Management
# Needs trailing / in the URL if using PathPrefixStrip
  portainer:
    image: portainer/portainer
    container_name: portainer
    hostname: portainer
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${PORTAINER_PORT}:9000"
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USER_DIR}/docker/portainer/data:/data
    environment:
      TZ: ${TZ}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      - "traefik.http.routers.portainer-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.portainer-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

# Organizr - Unified Frontend
  organizr:
    container_name: organizr
    image: organizr/organizr
    restart: unless-stopped
    networks:
      - traefik_proxy
      - default
    ports:
      - "${ORGANIZR_PORT}:80"
    volumes:
      - ${USER_DIR}/docker/organizr:/config
    environment:
      PUID: 1001
      PGID: 1001
      TZ: ${TZ}
      fpm: "true"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.organizr-rtr.entrypoints=https"
      - "traefik.http.routers.organizr-rtr.rule=Host(`www.$DOMAINNAME`)" 
      - "traefik.http.routers.organizr-rtr.tls=true"
      - "traefik.http.routers.organizr-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.organizr-rtr.middlewares=secure-chain@file" 
#      - "traefik.http.middlewares.organizr-headers.headers.customResponseHeaders.sslHost=$DOMAINNAME"
#      - "traefik.http.middlewares.organizr-headers.headers.customResponseHeaders='X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'"
#      - "traefik.http.middlewares.organizr-headers.headers.browserxssfilter=true"
#      - "traefik.http.middlewares.organizr-headers.headers.contentsecuritypolicy=frame-ancestors 'none'; object-src 'none'; script-src 'none'; base-uri 'none';"
#      - "traefik.http.middlewares.organizr-headers.headers.referrerpolicy=same-origin"
      ## HTTP Services
      - "traefik.http.routers.organizr-rtr.service=organizr-svc"
      - "traefik.http.services.organizr-svc.loadbalancer.server.port=80"

# Heimdall - Unified Frontend Alternative
# Putting all services behind Oragnizr slows things down.
#  heimdall:
#    image: linuxserver/heimdall
#    container_name: heimdall
#    hostname: heimdall
#    restart: unless-stopped
#    networks:
#      - traefik_proxy
#    ports:
#     - "${HEIMDALL_PORT}:80"
#    volumes:
#      - ${USER_DIR}/docker/heimdall:/config
#    environment:
#      PUID: ${USER_ID}
#      PGID: ${GROUP_ID}
#      TZ: ${TZ}
#    labels:
#      - "traefik.enable=true"
      ## HTTP Routers
#      - "traefik.http.routers.heimdall-rtr.entrypoints=https"
#      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
#      - "traefik.http.routers.heimdall-rtr.tls=true"
#      - "traefik.http.routers.heimdall-rtr.tls.certresolver=basic"
      ## Middlewares
#      - "traefik.http.routers.heimdall-rtr.middlewares=secure-chain@file"
      ## HTTP Services
#      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
#      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

## Autoindex - Simple Directory Index
#  autoindex:
#    image: dceoy/nginx-autoindex
#    container_name: autoindex
#    hostname: autoindex
#    restart: unless-stopped
#    networks:
#      - traefik_proxy
#    ports:
#      - "8015:80"
#    volumes:
#      - ${USER_DIR}:/var/lib/nginx/html:ro # Location you want to index
#    labels:
#      - "traefik.enable=true"
      ## HTTP Routers
#      - "traefik.http.routers.autoindex-rtr.entrypoints=https"                                           
#      - "traefik.http.routers.autoindex-rtr.rule=Host(`index.$DOMAINNAME`)"
#      - "traefik.http.routers.autoindex-rtr.tls=true"
#      - "traefik.http.routers.autoindex-rtr.tls.certresolver=basic"
      ## Middlewares
#      - "traefik.http.routers.autoindex-rtr.middlewares=secure-chain@file"
      ## HTTP Services
#      - "traefik.http.routers.autoindex-rtr.service=autoindex-svc"
#      - "traefik.http.services.autoindex-svc.loadbalancer.server.port=80"

#Working Sept 2020 but not as good as below youtube music downloader
#does not download locally!
#https://github.com/wader/ydls
#  youtube-downloader:
#    image: mwader/ydls
#    container_name: youtube-downloader
#    hostname: youtube-downloader
#    restart: unless-stopped
#    networks:
#     - traefik_proxy
#    ports:
#        - "${YOUTUBEDOWNLOAD_PORT}:8080"
#    volumes:
#      - ${DOWNLOAD_DIR}/convertedMusic:/downloads
#    working_dir: /downloads
#    environment:
#      UID: ${USER_ID}
#      GID: ${GROUP_ID}
#      TZ: ${TZ}

#Working Sept 2020 youtube music downloader
#https://hub.docker.com/r/modenaf360/youtube-dl-nas
  youtube-downloader:
    image: modenaf360/youtube-dl-nas
    container_name: youtube-downloader
    hostname: youtube-downloader
    restart: unless-stopped
    networks:
     - traefik_proxy
    ports:
        - "${YOUTUBEDOWNLOAD_PORT2}:8080"
    volumes:
      - ${DOWNLOAD_DIR}/convertedMusic:/downfolder
    environment:
      UID: ${USER_ID}
      GID: ${GROUP_ID}
      TZ: ${TZ}
      MY_ID: ${TRANSMISSION_RPC_USERNAME}
      MY_PW: ${TRANSMISSION_RPC_PASSWORD}


# LAN Cache (Steam, origin, windows update, etc cache)
  lancache:
    image: lancachenet/monolithic:latest
    container_name: lancache
    hostname: lancache
    restart: unless-stopped
    networks:
     lan:
       ipv4_address: 192.168.10.3
    ports:
        - "80:80/tcp"
        - "443:443/tcp"
    volumes:
      - /mnt/sdb1/lancache/cache:/data/cache
      - /mnt/sdb1/lancache/logs:/data/logs
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}
 
# LAN Cache DNS server
  lancacheDNS:
    image: lancachenet/lancache-dns:latest
    container_name: lancacheDNS
    hostname: lancacheDNS
    restart: always
    networks:
     lan:
       ipv4_address: 192.168.10.2
    ports:
        - "53:53/udp"
        - "53:53/tcp"
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}
      USE_GENERIC_CACHE: "true"
      LANCACHE_IP: 192.168.10.3
      UPSTREAM_DNS: 192.168.8.1
#      DISABLE_WSUS: true

############################ SMART HOME

  node-red:
    image: nodered/node-red
    container_name: node-red
    hostname: node-red
    restart: unless-stopped
    networks:
     - traefik_proxy
    ports:
        - "${NODERED_PORT}:1880"
        - "1820:1820"
    volumes:
      - ${USER_DIR}/docker/nodered:/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}



# HA-Dockermon - Manage Docker containers in Home Assistant, allows you to start,stop, get status of a docker container with home automation
  ha-dockermon:
    image: philhawthorne/ha-dockermon
    container_name: ha-dockermon
    hostname: ha-dockermon
    restart: unless-stopped
    networks:
     - traefik_proxy
    ports:
        - "${HA_DOCKERMON_PORT}:8126"
    volumes:
      - ${USER_DIR}/docker/ha-dockermon:/config
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}


# Mosquitto - MQTT Broker
# Create mosquitto.conf, passwd, mosquitto.log files  and set permissions to 775 user:docker
  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    hostname: mosquitto
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${MOSQUITTO_HTTP_PORT}:1883" #http
#      - "9001:9001" #websockets
      - "${MOSQUITTO_HTTPS_PORT}:8883" #https
    volumes: 
      - ${USER_DIR}/docker/mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - ${USER_DIR}/docker/mosquitto/config/passwd:/mosquitto/config/passwd
      - ${USER_DIR}/docker/mosquitto/data:/mosquitto/data
      - ${USER_DIR}/docker/shared:/shared
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}

# ZoneMinder - Video Surveillance 
# Create the database and initial tables using the init script. Database zm, username zmuser, and password zmpass - cannot customize zm, zmuser, or zmpass.
  zoneminder:
    image: dlandon/zoneminder:latest
    container_name: zoneminder
    hostname: zoneminder
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${ZONEMINDER_HTTP_PORT}:80"
      - "${ZONEMINDER_HTTPS_PORT}:443"
      - "9001:9000" # Event Notification Port
    privileged: true
    volumes:
      - ${USER_DIR}/docker/zoneminder/zoneminder:/var/cache/zoneminder:rw
      - ${USER_DIR}/docker/zoneminder/config:/config:rw
    environment:
      SHMEM: "50%"
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}
      INSTALL_HOOK: 1
      INSTALL_FACE: 1
      INSTALL_TINY_YOLO: 0
      INSTALL_YOLO: 1
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.zoneminder-rtr.entrypoints=https"                                          
      - "traefik.http.routers.zoneminder-rtr.rule=Host(`zone.$DOMAINNAME`)"
      - "traefik.http.routers.zoneminder-rtr.tls=true"
      - "traefik.http.routers.zoneminder-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.zoneminder-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.zoneminder-rtr.service=zoneminder-svc"
      - "traefik.http.services.zoneminder-svc.loadbalancer.server.port=80"

############################# DATABASE

# phpMyAdmin - Database management
# Create a new user with admin privileges. Cannot login as root.
#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin
#    container_name: phpmyadmin
#    hostname: phpmyadmin
#    restart: unless-stopped
#    networks:
#      - traefik_proxy
#    ports:
#      - "${PHPMYADMIN_PORT}:80"
#    depends_on:
#      - mariadb
#    links:
#      - mariadb:db
#    volumes:
#      - ${USER_DIR}/docker/phpmyadmin:/etc/phpmyadmin
#    environment:
#      PMA_HOST: ${DB_HOST}
#      PMA_PORT: ${DB_PORT}
#      PMA_ARBITRARY: 1
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.phpmyadmin-rtr.entrypoints=https"                                              
#      - "traefik.http.routers.phpmyadmin-rtr.rule=Host(`phpmyadmin.$DOMAINNAME`)"
#      - "traefik.http.routers.phpmyadmin-rtr.tls=true"
#      - "traefik.http.routers.phpmyadmin-rtr.tls.certresolver=basic"
#      ## Middlewares
#      - "traefik.http.routers.phpmyadmin-rtr.middlewares=secure-chain@file"
#      ## HTTP Services
#      - "traefik.http.routers.phpmyadmin-rtr.service=phpmyadmin-svc"
#      - "traefik.http.services.phpmyadmin-svc.loadbalancer.server.port=80"

# InfluxDB - Database for sensor data
# Create influxdb.conf
  influxdb:
    image: influxdb:1.8.3
    container_name: influxdb
    hostname: influxdb
    restart: always
    ports:
      - "${INFLUXDB_PORT}:8086"
    networks:
      - traefik_proxy
    volumes:
      - ${USER_DIR}/docker/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - ${USER_DIR}/docker/influxdb/db:/var/lib/influxdb
    command: -config /etc/influxdb/influxdb.conf

  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    networks:
      - traefik_proxy
    environment:
      HOST_PROC: /rootfs/proc
      HOST_SYS: /rootfs/sys
      HOST_ETC: /rootfs/etc
    volumes:
      - ${USER_DIR}/docker/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/rootfs/sys:ro
      - /proc:/rootfs/proc:ro
      - /etc:/rootfs/etc:ro

# Postgres - Database
#  postgres:
#    image: postgres
#    container_name: postgres
#    hostname: postgres
#    restart: always
#    volumes:
#      - ${USER_DIR}/docker/postgres:/var/lib/postgresql/data
#    environment:
#      POSTGRES_PASSWORD: ${STATPING_DB_PASS}
#      POSTGRES_USER: ${STATPING_DB_USER}
#      POSTGRES_DB: ${STATPING_DB}

# Grafana - Graphical data visualization for InfluxDB data
  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - "influxdb"
    user: "0"
    volumes:
      - ${USER_DIR}/docker/grafana:/var/lib/grafana
    environment:
      GF_INSTALL_PLUGINS: "grafana-clock-panel,grafana-simple-json-datasource,grafana-worldmap-panel,grafana-piechart-panel" 
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.$DOMAINNAME`)"
      - "traefik.http.routers.grafana-rtr.tls=true"
      - "traefik.http.routers.grafana-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"

# Chrongraf - Graphical data visualization for InfluxDB data
  chronograf:
    image: chronograf
    container_name: chronograf
    hostname: chronograf
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${CHRONOGRAF_PORT}:8888"
    depends_on:
      - "influxdb"
    volumes:
      -  ${USER_DIR}/docker/chrongraf/data/:/var/lib/chronograf/
    environment:
      influx-url: http://influxdb:8086     
    labels:
      traefik.enable: "true"
      traefik.backend: chronograf
      traefik.protocol: http
      traefik.port: 8888
      traefik.frontend.rule: Host:chronograf.${DOMAINNAME}
      traefik.frontend.headers.SSLHost: chronograf.${DOMAINNAME}
      traefik.docker.network: traefik_proxy
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.headers.SSLForceHost: "true"
      traefik.frontend.headers.SSLRedirect: "true"
      traefik.frontend.headers.browserXSSFilter: "true"
      traefik.frontend.headers.contentTypeNosniff: "true"
      traefik.frontend.headers.forceSTSHeader: "true"
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.STSIncludeSubdomains: "true"
      traefik.frontend.headers.STSPreload: "true"
      traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      traefik.frontend.headers.frameDeny: "true"
      traefik.frontend.headers.customFrameOptionsValue: 'allow-from https:${DOMAINNAME}'
      traefik.frontend.auth.forward.address: "http://oauth:4181"
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: "true"

# Varken - Monitor , Sonarr, Radarr, and Other Data
  varken:
    image: boerderij/varken
    hostname: varken
    container_name: varken
    restart: unless-stopped
    networks:
      - traefik_proxy
    depends_on:
      - "influxdb"
    volumes:
      - ${USER_DIR}/docker/varken:/config
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}
      VRKN_GLOBAL_SONARR_SERVER_IDS: 1
      VRKN_GLOBAL_RADARR_SERVER_IDS: 1
      VRKN_GLOBAL_LIDARR_SERVER_IDS: "false"
      VRKN_GLOBAL_TAUTULLI_SERVER_IDS: 1
      VRKN_GLOBAL_OMBI_SERVER_IDS: "false"
      VRKN_GLOBAL_SICKCHILL_SERVER_IDS: "false"
      VRKN_GLOBAL_UNIFI_SERVER_IDS: 1
      VRKN_INFLUXDB_URL: influxdb
      VRKN_INFLUXDB_PORT: 8086
      VRKN_INFLUXDB_SSL: "false"
      VRKN_INFLUXDB_VERIFY_SSL: "false"
      VRKN_INFLUXDB_USERNAME: ${INFLUX_USER}
      VRKN_INFLUXDB_PASSWORD: ${INFLUX_PASS}
      VRKN_TAUTULLI_1_URL: ${SERVER_IP}:${TAUTULLI_PORT}
      VRKN_TAUTULLI_1_FALLBACK_IP: 1.1.1.1
      VRKN_TAUTULLI_1_APIKEY: ${TAUTULLI_API_KEY}
      VRKN_TAUTULLI_1_SSL: "false"
      VRKN_TAUTULLI_1_VERIFY_SSL: "false"
      VRKN_TAUTULLI_1_GET_ACTIVITY: "true"
      VRKN_TAUTULLI_1_GET_ACTIVITY_RUN_SECONDS: 30
      VRKN_TAUTULLI_1_GET_STATS: "true"
      VRKN_TAUTULLI_1_GET_STATS_RUN_SECONDS: 3600
      VRKN_SONARR_1_URL: ${SERVER_IP}:${SONARR_PORT}
      VRKN_SONARR_1_APIKEY: ${SONARR_API_KEY}
      VRKN_SONARR_1_SSL: "false"
      VRKN_SONARR_1_VERIFY_SSL: "false"
      VRKN_SONARR_1_MISSING_DAYS: 7
      VRKN_SONARR_1_MISSING_DAYS_RUN_SECONDS: 300
      VRKN_SONARR_1_FUTURE_DAYS: 1
      VRKN_SONARR_1_FUTURE_DAYS_RUN_SECONDS: 300
      VRKN_SONARR_1_QUEUE: "true"
      VRKN_SONARR_1_QUEUE_RUN_SECONDS: 300
      VRKN_RADARR_1_URL: ${SERVER_IP}:${RADARR_PORT}
      VRKN_RADARR_1_APIKEY: ${RADARR_API_KEY}
      VRKN_RADARR_1_SSL: "false"
      VRKN_RADARR_1_VERIFY_SSL: "false"
      VRKN_RADARR_1_QUEUE: "true"
      VRKN_RADARR_1_QUEUE_RUN_SECONDS: 300
      VRKN_RADARR_1_GET_MISSING: "true"
      VRKN_RADARR_1_GET_MISSING_RUN_SECONDS: 300
#      VRKN_UNIFI_1_URL: ${UNIFI_HOST}
#      VRKN_UNIFI_1_USERNAME: ${UNIFI_USER}
#      VRKN_UNIFI_1_PASSWORD: ${UNIFI_PASS}
#      VRKN_UNIFI_1_SITE: default
#      VRKN_UNIFI_1_USG_NAME: USG
#      VRKN_UNIFI_1_SSL: "true"
#      VRKN_UNIFI_1_VERIFY_SSL: "false"
#      VRKN_UNIFI_1_GET_USG_STATS_RUN_SECONDS: 300

############################# MEDIA
# AirSonic - Music Server
#  airsonic:
#    container_name: airsonic
#    image: linuxserver/airsonic:latest
#    restart: unless-stopped
#    networks:
#      - traefik_proxy
#    ports:
#      - "${AIRSONIC_PORT}:4040"
#    volumes:
#      - /media:/nas:ro
#      - $USER_DIR/docker/airsonic/podcasts:/podcasts
#      - $USER_DIR/docker/airsonic/playlists:/playlists
#      - $USER_DIR/docker/airsonic/config:/config
##      - $USER_DIR/docker/airsonic/config:/app/airsonic/config #Used to change log level for debugging
#      - /etc/timezone:/etc/timezone:ro
#      - /etc/localtime:/etc/localtime:ro
#    environment:
#      - PUID=$USER_ID
#      - PGID=$GROUP_ID
#      - JAVA_OPTS=-Dserver.use-forward-headers=true
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.airsonic-rtr.entrypoints=https"
#      - "traefik.http.routers.airsonic-rtr.rule=Host(`airsonic.$DOMAINNAME`)"
#      - "traefik.http.routers.airsonic-rtr.tls=true"
#      - "traefik.http.routers.airsonic-rtr.tls.certresolver=basic"
#      ## Middlewares
#      - "traefik.http.routers.airsonic-rtr.middlewares=noauth-chain@file"
#      ## HTTP Services
#      - "traefik.http.routers.airsonic-rtr.service=airsonic-svc"
#      - "traefik.http.services.airsonic-svc.loadbalancer.server.port=4040"

# Plex - Media Server
  plexms:
    image: plexinc/pms-docker:latest
    container_name: plexms
    hostname: plexms
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${PLEX_PORT}:32400/tcp"
      - "3005:3005/tcp"
      - "8324:8324/tcp"
      - "32469:32469/tcp"
      - "1900:1900/udp"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "${PLEX_WEB_TOOLS_PORT}:33400"
    volumes:
      - ${USER_DIR}/docker/plexms:/config
      - ${USER_DIR}:/Storage
      - /dev/shm:/transcode # Offload transcoding to RAM if you have enough RAM
    deploy:
           resources:
             reservations:
               devices:
                 - capabilities:
                   - gpu
    devices:
      - /dev/dri:/dev/dri
    environment:
      TZ: ${TZ}
      HOSTNAME: "plexms"
      PLEX_CLAIM: ${PLEX_CLAIM}
      PLEX_UID: ${USER_ID}
      PLEX_GID: ${GROUP_ID}
      ADVERTISE_IP: http://${SERVER_IP}:${PLEX_PORT}/
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,video,utility
    labels:
      - "autoheal=true"
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.plexms-rtr.entrypoints=https"
      - "traefik.http.routers.plexms-rtr.rule=Host(`plexms.$DOMAINNAME`)"
      - "traefik.http.routers.plexms-rtr.tls=true"
      - "traefik.http.routers.plexms-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.plexms-rtr.middlewares=noauth-chain@file"
      ## HTTP Services
      - "traefik.http.routers.plexms-rtr.service=plexms-svc"
      - "traefik.http.services.plexms-svc.loadbalancer.server.port=32400"

# Tautulli - Previously PlexPy. Plex statistics and monitoring
# Set HTTP Root in Tautulli settings if using PathPrefix
  tautulli:
    image: linuxserver/tautulli
    container_name: tautulli
    hostname: tautulli
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${TAUTULLI_PORT}:8181"
    volumes:
      - ${USER_DIR}/docker/tautulli/config:/config
      - ${USER_DIR}/docker/tautulli/logs:/logs:ro
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.$DOMAINNAME`)"                                                              
      - "traefik.http.routers.tautulli-rtr.tls=true"
      - "traefik.http.routers.tautulli-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"

# Plex-Sync - For Syncing watched status between plex servers 
#  plex-sync:
#    image: patsissons/plex-sync:develop
#    container_name: plex-sync
#    environment:
#      INITIAL_RUN: "true"
#      DRY_RUN: 0
#      CRON_SCHEDULE: '*/5 * * * *'
#      SECTION_MAPS: ${SYN_PLEX}/${SYN_PLEX_HOLLYWOOD} ${NUC_PLEX}/${NUC_PLEX_HOLLYWOOD} | ${SYN_PLEX}/${SYN_PLEX_TVSHOWS} ${NUC_PLEX}/${NUC_PLEX_TVSHOWS} | ${SYN_PLEX}/${SYN_PLEX_BOLLYWOOD} ${NUC_PLEX}/${NUC_PLEX_BOLLYWOOD} | ${SYN_PLEX}/${SYN_PLEX_KOLLYWOOD} ${NUC_PLEX}/${NUC_PLEX_KOLLYWOOD} | ${SYN_PLEX}/${SYN_PLEX_TOLLYWOOD} ${NUC_PLEX}/${NUC_PLEX_TOLLYWOOD} | ${SYN_PLEX}/${SYN_PLEX_DOCMOVIES} ${NUC_PLEX}/${NUC_PLEX_DOCMOVIES} | ${SYN_PLEX}/${SYN_PLEX_DOCSHOWS} ${NUC_PLEX}/${NUC_PLEX_DOCSHOWS} | ${SYN_PLEX}/${SYN_PLEX_KIDSMOVIES} ${NUC_PLEX}/${NUC_PLEX_KIDSMOVIES} | ${SYN_PLEX}/${SYN_PLEX_INTERNATIONAL} ${NUC_PLEX}/${NUC_PLEX_INTERNATIONAL}
#    restart: unless-stopped

# Telly Tv- IPTV proxy for Plex
# https://hub.docker.com/r/tellytv/telly
# https://github.com/tellytv/telly/wiki/Docker-Walkthrough%3A-Linux-with-config-file
# https://github.com/tellytv/telly/wiki/Adding-Telly-to-Plex
# Telly uses port 6077
# In plex, the DVR IP will be http://HostIP:6077
# EPG data will be at http://HostIP:6077/epg.xml
#  tellytv:
#    image: tellytv/telly:dev-ffmpeg
#    container_name: tellytv
#    hostname: tellytv
#    environment:
#      - TZ=${TZ}
#    network_mode: host
#    volumes:
#      - ${USER_DIR}/docker/telly/telly.config.toml:/etc/telly/telly.config.toml
#    restart: unless-stopped

############################# MEDIA FILE MANAGEMENT

# Bazarr - Subtitle Management
  bazarr:
    image: linuxserver/bazarr
    container_name: bazarr
    hostname: bazarr
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${BAZARR_PORT}:6767"
    volumes:
      - ${USER_DIR}/docker/bazarr:/config
      - ${USER_DIR}:/Storage
    environment:
      PUID: ${USER_ID}
      PGID: ${GROUP_ID}
      TZ: ${TZ}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.bazarr-rtr.entrypoints=https"
      - "traefik.http.routers.bazarr-rtr.rule=Host(`bazarr.$DOMAINNAME`)"                                                        
      - "traefik.http.routers.bazarr-rtr.tls=true"
      - "traefik.http.routers.bazarr-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.bazarr-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.bazarr-rtr.service=bazarr-svc"
      - "traefik.http.services.bazarr-svc.loadbalancer.server.port=6767"

# Picard - Music Library Tagging and Management
  picard:
    image: mikenye/picard
    container_name: picard
    hostname: picard
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${PICARD_PORT}:5800"
    volumes:
      - ${DOWNLOAD_DIR}/wip_media:/wip_media:rw
      - ${USER_DIR}/docker/picard:/config:rw
      - ${MUSIC_DIR}:/music:rw
      - ${USER_DIR}/Archive/Archived Music:/archived_music:rw
      - /dev/shm:/dev/shm
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      TZ: ${TZ}
      UMASK: 002
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.picard-rtr.entrypoints=https"          
      - "traefik.http.routers.picard-rtr.rule=Host(`picard.$DOMAINNAME`)"
      - "traefik.http.routers.picard-rtr.tls=true"
      - "traefik.http.routers.picard-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.picard-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.picard-rtr.service=picard-svc"
      - "traefik.http.services.picard-svc.loadbalancer.server.port=5800"

# Handbrake - Video Conversion (Transcoding and compression)
  handbrake:
    image: zocker160/handbrake-nvenc:latest
    container_name: handbrake
    hostname: handbrake
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${HANDBRAKE_PORT}:5800"
    volumes:
      - ${FINISHED_DOWNLOAD_DIR}:/downloads:ro
      - ${USER_DIR}/docker/handbrake/config:/config:rw
      - ${USER_DIR}/Archive/Downloads/videoForConversion:/watch:rw
      - ${USER_DIR}/Archive/Downloads/convertedVideo:/output:rw
      - ${USER_DIR}:/Storage
    deploy:
           resources:
             reservations:
               devices:
                 - capabilities:
                   - gpu
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      UMASK: 002
      TZ: ${TZ}
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      AUTOMATED_CONVERSION_KEEP_SOURCE: 1
      VNC_PASSWORD: ${HANDBRAKE_VNC_PASSWD}
      NVIDIA_DRIVER_CAPABILITIES: all
      NVIDIA_VISIBLE_DEVICES: all
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.handbrake-rtr.entrypoints=https"               
      - "traefik.http.routers.handbrake-rtr.rule=Host(`handbrake.$DOMAINNAME`)"
      - "traefik.http.routers.handbrake-rtr.tls=true"
      - "traefik.http.routers.handbrake-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.handbrake-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.handbrake-rtr.service=handbrake-svc"
      - "traefik.http.services.handbrake-svc.loadbalancer.server.port=5800"

# MKVToolNix - Video Editing (Remuxing - changing media container while keeping original source quality)
  mkvtoolnix:
    image: jlesage/mkvtoolnix
    container_name: mkvtoolnix
    hostname: mkvtoolnix
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${MKVTOOLNIX_PORT}:5800"
    volumes:
      - ${USER_DIR}:/downloads:rw
      - ${USER_DIR}/docker/mkvtoolnix/config:/config:rw
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      UMASK: 002
      TZ: ${TZ}
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: ${MKVTOOLNIX_VNC_PASSWD}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.mkvtoolnix-rtr.entrypoints=https"              
      - "traefik.http.routers.mkvtoolnix-rtr.rule=Host(`mkvtoolnix.$DOMAINNAME`)"
      - "traefik.http.routers.mkvtoolnix-rtr.tls=true"
      - "traefik.http.routers.mkvtoolnix-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.mkvtoolnix-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.mkvtoolnix-rtr.service=mkvtoolnix-svc"
      - "traefik.http.services.mkvtoolnix-svc.loadbalancer.server.port=5800"

# MakeMKV - Video Editing (Ripping from Disks)
  makemkv:
    image: jlesage/makemkv
    container_name: makemkv
    hostname: makemkv
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${MAKEMKV_PORT}:5800"
    volumes:
      - ${USER_DIR}:/Downloads:rw
      - ${USER_DIR}/docker/makemkv/config:/config:rw
      - ${DOWNLOAD_DIR}/wip_media:/output:rw
      - /dev/shm:/dev/shm
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      UMASK: 002
      TZ: ${TZ}
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: ${MAKEMKV_VNC_PASSWD}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.makemkv-rtr.entrypoints=https"               
      - "traefik.http.routers.makemkv-rtr.rule=Host(`makemkv.$DOMAINNAME`)"
      - "traefik.http.routers.makemkv-rtr.tls=true"
      - "traefik.http.routers.makemkv-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.makemkv-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.makemkv-rtr.service=makemkv-svc"
      - "traefik.http.services.makemkv-svc.loadbalancer.server.port=5800"

# FileBot - File renamer
  filebot:
    image: jlesage/filebot
    container_name: filebot
    hostname: filebot
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${FILEBOT_PORT}:5800"
    volumes:
      - ${USER_DIR}/docker/filebot:/config
      - ${USER_DIR}:/Storage
      - ${FINISHED_DOWNLOAD_DIR}:/downloads
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      TZ: ${TZ}
      UMASK: 002
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWD: ${FILEBOT_VNC_PASSWD}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.filebot-rtr.entrypoints=https"              
      - "traefik.http.routers.filebot-rtr.rule=Host(`filebot.$DOMAINNAME`)"
      - "traefik.http.routers.filebot-rtr.tls=true"
      - "traefik.http.routers.filebot-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.filebot-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.filebot-rtr.service=filebot-svc"
      - "traefik.http.services.filebot-svc.loadbalancer.server.port=5800"

############################# UTILITIES

#Chrome
#  chrome:
#    image: siomiz/chrome
#    container_name: chrome
#    hostname: chrome
#    restart: unless-stopped
#    networks:
#     - traefik_proxy
#    ports:
#        - "${CHROME_PORT}:5900"
#    volumes:
#      - ${USER_DIR}/docker/chrome:/home/chrome
#    environment:
#      PUID: ${USER_ID}
#      PGID: ${GROUP_ID}
#      TZ: ${TZ}
#    command:
#     - /crdonly

# Firefox - Web Broswer
#  firefox:
#    image: jlesage/firefox
#    container_name: firefox
#    hostname: firefox 
#    restart: unless-stopped
#    networks: 
#      - traefik_proxy
#    ports: 
#      - "${FIREFOX_PORT}:5800"
#    volumes:
#      - ${USER_DIR}/docker/firefox:/config
#      - ${FINISHED_DOWNLOAD_DIR}:/config/downloads
#      - /dev/shm:/dev/shm
#      - ${USER_DIR}/docker/shared:/shared
#    environment:
#      USER_ID: ${USER_ID}
#      GROUP_ID: ${GROUP_ID}
#      TZ: ${TZ}
#      UMASK: 002
#      KEEP_APP_RUNNING: 1
#      CLEAN_TMP_DIR: 1
#      DISPLAY_WIDTH: 1600
#      DISPLAY_HEIGHT: 960
#      VNC_PASSWD: ${FIREFOX_VNC_PASSWD}
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.firefox-rtr.entrypoints=https"              
#      - "traefik.http.routers.firefox-rtr.rule=Host(`firefox.$DOMAINNAME`)"
#      - "traefik.http.routers.firefox-rtr.tls=true"
#      - "traefik.http.routers.firefox-rtr.tls.certresolver=basic"
#      ## Middlewares
#      - "traefik.http.routers.firefox-rtr.middlewares=secure-chain@file"
#      ## HTTP Services
#      - "traefik.http.routers.firefox-rtr.service=firefox-svc"
#      - "traefik.http.services.firefox-svc.loadbalancer.server.port=5800"

# Glances - System Information
#  glances:
#    image: nicolargo/glances
#    hostname: glances
#    container_name: glances
#    restart: unless-stopped
#    privileged: true
#    network_mode: host
#    networks:
#      - traefik_proxy
#    depends_on:
#      - influxdb
#    ports:
#      - "${GLANCES_PORT}:61208"
#    pid: host
#    tty: true
#    stdin_open: true
#    volumes:
#      - ${USER_DIR}/docker/glances/glances.conf:/glances/conf/glances.conf
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#    environment:
#      GLANCES_OPT: "-C /glances/conf/glances.conf --export influxdb"
#      GLANCES_OPT: "-w"
#    labels:
#      - "traefik.enable=true"
#      ## HTTP Routers
#      - "traefik.http.routers.glances-rtr.entrypoints=https"
#      - "traefik.http.routers.glances-rtr.rule=Host(`glances.$DOMAINNAME`)"
#      - "traefik.http.routers.glances-rtr.tls=true"
#      - "traefik.http.routers.glances-rtr.tls.certresolver=basic"
#      ## Middlewares
#      - "traefik.http.routers.glances-rtr.middlewares=secure-chain@file"
#      ## HTTP Services
#      - "traefik.http.routers.glances-rtr.service=glances-svc"
#      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

# Logarr - Log Management
  logarr:
    image: monitorr/logarr
    container_name: logarr
    hostname: logarr
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
     - "${LOGARR_PORT}:80"
    volumes:
      - ${USER_DIR}/docker/logarr/config:/config
      - ${USER_DIR}/docker/logarr/logs:/var/log/logarrlogs
    environment:
      TZ: ${TZ}
    labels:
      traefik.enable: "true"
      traefik.backend: logarr
      traefik.protocol: http
      traefik.port: 80
      traefik.frontend.rule: Host:logarr.${DOMAINNAME}
      traefik.frontend.headers.SSLHost: logarr.${DOMAINNAME}
      traefik.docker.network: traefik_proxy
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.headers.SSLForceHost: "true"
      traefik.frontend.headers.SSLRedirect: "true"
      traefik.frontend.headers.browserXSSFilter: "true"
      traefik.frontend.headers.contentTypeNosniff: "true"
      traefik.frontend.headers.forceSTSHeader: "true"
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.STSIncludeSubdomains: "true"
      traefik.frontend.headers.STSPreload: "true"
      traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      traefik.frontend.headers.frameDeny: "true"
      traefik.frontend.headers.customFrameOptionsValue: 'allow-from https:${DOMAINNAME}'
      traefik.frontend.auth.forward.address: "http://oauth:4181"
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: "true"

# Monitorr - Webfront to display the status of any webapp or service
  monitorr:
    image: monitorr/monitorr
    container_name: monitorr
    hostname: monitorr
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${MONITORR_PORT}:80"
    volumes:
      - ${USER_DIR}/docker/monitorr:/app
    environment:
      - PUID=${USER_ID}
      - PGID=1001
      - TZ=${TZ}
    labels:
      traefik.enable: "true"
      traefik.backend: monitorr
      traefik.protocol: http
      traefik.port: 80
      traefik.frontend.rule: Host:monitorr.${DOMAINNAME}
      traefik.frontend.headers.SSLHost: monitorr.${DOMAINNAME}
      traefik.docker.network: traefik_proxy
      traefik.frontend.passHostHeader: "true"
      traefik.frontend.headers.SSLForceHost: "true"
      traefik.frontend.headers.SSLRedirect: "true"
      traefik.frontend.headers.browserXSSFilter: "true"
      traefik.frontend.headers.contentTypeNosniff: "true"
      traefik.frontend.headers.forceSTSHeader: "true"
      traefik.frontend.headers.STSSeconds: 315360000
      traefik.frontend.headers.STSIncludeSubdomains: "true"
      traefik.frontend.headers.STSPreload: "true"
      traefik.frontend.headers.customResponseHeaders: X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex
      traefik.frontend.headers.frameDeny: "true"
      traefik.frontend.headers.customFrameOptionsValue: 'allow-from https:${DOMAINNAME}'
      traefik.frontend.auth.forward.address: "http://oauth:4181"
      traefik.frontend.auth.forward.authResponseHeaders: X-Forwarded-User
      traefik.frontend.auth.forward.trustForwardHeader: "true"

# APCUPSD - APC UPS Management
# create the apcupsd.conf file
  apcupsd:
    image: gersilex/apcupsd
    container_name: apcupsd
    hostname: apcupsd
    restart: unless-stopped
    networks:
      - traefik_proxy
#this port broadcasts power envents
    ports:
      - "${APCUPSD_PORT}:3551"
    privileged: true
    tty: true
    volumes:
      - /tmp/apcupsd-docker:/tmp/apcupsd-docker
      - ${USER_DIR}/docker/apcupsd/apcupsd.conf:/etc/apcupsd/apcupsd.conf
      - ${USER_DIR}/docker/apcupsd/doshutdown:/etc/apcupsd/doshutdown
      - ${USER_DIR}/docker/apcupsd/apcupsd.events:/var/log/apcupsd.events

# qDirStat - Directory Statistics
  qdirstat:
    image: jlesage/qdirstat
    container_name: qdirstat
    hostname: qdirstat
    restart: unless-stopped
    networks:
      - traefik_proxy
#    ports:
#      - "${QDIRSTAT_PORT}:5800"
    volumes:
      - ${USER_DIR}:/storage:ro
      - ${USER_DIR}/docker/qdirstat/config:/config:rw
      - ${USER_DIR}:/Storage
    environment:
      USER_ID: ${USER_ID}
      GROUP_ID: ${GROUP_ID}
      UMASK: 002
      TZ: ${TZ}
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: ${QDIRSTAT_VNC_PASSWD}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qdirstat-rtr.entrypoints=https"              
      - "traefik.http.routers.qdirstat-rtr.rule=Host(`qdirstat.$DOMAINNAME`)"
      - "traefik.http.routers.qdirstat-rtr.tls=true"
      - "traefik.http.routers.qdirstat-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.qdirstat-rtr.middlewares=secure-chain@file"
      ## HTTP Services
      - "traefik.http.routers.qdirstat-rtr.service=qdirstat-svc"
      - "traefik.http.services.qdirstat-svc.loadbalancer.server.port=5800"

# Guacamole - Remote desktop, SSH, on Telnet on any HTML5 Browser 
# Create all databases and tables first
  guacamole:
    image: guacamole/guacamole
    container_name: guacamole
    hostname: guacamole
    restart: unless-stopped
    networks:
      - traefik_proxy
    ports:
      - "${GUACAMOLE_PORT}:8080"
    links:
      - guacd:guacd
      - mariadb:mysql
    depends_on:
      - mariadb
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: ${DB_HOST}
      MYSQL_PORT: ${DB_PORT}
      MYSQL_DATABASE: guacamole
      MYSQL_USER: root
      MYSQL_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.guacamole-rtr.entrypoints=https"                                                                  
      - "traefik.http.routers.guacamole-rtr.rule=Host(`guac.$DOMAINNAME`)"
      - "traefik.http.routers.guacamole-rtr.tls=true"
      - "traefik.http.routers.guacamole-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.guacamole-rtr.middlewares=secure-chain@file,add-guacamole" 
      - "traefik.http.middlewares.add-guacamole.addPrefix.prefix=/guacamole"
      ## HTTP Services
      - "traefik.http.routers.guacamole-rtr.service=guacamole-svc"
      - "traefik.http.services.guacamole-svc.loadbalancer.server.port=8080"

# Guacamole Daemon - Needed for Guacamole
  guacd:
    image: guacamole/guacd
    container_name: guacd
    hostname: guacd
    restart: unless-stopped
    networks:
      - traefik_proxy

# StatPing - Status Page & Monitoring Server
  statping:
    image: hunterlong/statping:latest
    container_name: statping
    hostname: statping
    restart: unless-stopped
    networks:
      - traefik_proxy
    depends_on:
      - mariadb
    ports:
      - "${STATPING_PORT}:8080"
    volumes:
      - ${USER_DIR}/docker/statping:/app
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      VIRTUAL_HOST: localhost
      VIRTUAL_PORT: 8080
      DB_CONN: mysql
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: root
      DB_PASS: ${MYSQL_ROOT_PASSWORD}
      DB_DATABASE: statping
      IS_DOCKER: "true"
      DISABLE_LOGS: "false"
      NAME: StatPing
      DESCRIPTION: Monitor web services
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.statping-rtr.entrypoints=https"                         
      - "traefik.http.routers.statping-rtr.rule=Host(`statping.$DOMAINNAME`)"
      - "traefik.http.routers.statping-rtr.tls=true"
      - "traefik.http.routers.statping-rtr.tls.certresolver=basic"
      ## Middlewares
      - "traefik.http.routers.statping-rtr.middlewares=noauth-chain@file"
      ## HTTP Services
      - "traefik.http.routers.statping-rtr.service=statping-svc"
      - "traefik.http.services.statping-svc.loadbalancer.server.port=8080"

############################# MAINTENANCE

# Ouroboros - Automatic Docker Container Updates
  ouroboros:
    image: pyouroboros/ouroboros
    container_name: ouroboros
    hostname: ouroboros
    restart: unless-stopped
    networks:
      - traefik_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: ${TZ}
      INTERVAL: 86400
      LOG_LEVEL: debug
      SELF_UPDATE: "true"
      CLEANUP: "true"
      IGNORE: hassio_supervisor addon_core_check_config addon_62c7908d_autobackup
      NOTIFIERS: 'mailto://${GMAIL_USERNAME}:${GMAIL_APP_PASSWORD}@gmail.com'

# Docker-GC - Automatic Docker Garbage Collection 
# Create docker-gc-exclude file
  dockergc:
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    hostname: docker-gc
    restart: unless-stopped
    network_mode: none
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${USER_DIR}/docker/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude
    environment:
      CRON: 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: ${TZ}

# Docker Autoheal
# Container that restarts other containers that fail their health checks
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: unless-stopped
    networks:
      - traefik_proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

########################### SERVICES END
########################### VOLUMES
#volumes:
#  nvidia_driver_450.57:
#    external: true
